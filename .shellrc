#!/bin/bash
source "$HOME/.local/bin/.df-common.sh"

prependToPath "$HOME/.local/bin"

appendToPath "${HOME}/.krew/bin"
appendToPath "${HOME}/.cargo/bin"

if [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]] ; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

#
# Integrate useful tools if they are present
#

export EDITOR="$(firstCmdOf nvim vim)"
export VISUAL="$(firstCmdOf nvim vim)"

BAT_CMD="$(firstCmdOf bat batcat)"

if [[ -n $BAT_CMD ]]; then
    alias cat="$BAT_CMD"
    export BAT_STYLE=changes
    export BAT_THEME="Coldark-Dark"
    export BAT_PAGER=less # 'most' has some problems with the escape sequences
    export PAGER="$BAT_CMD"
fi

if cmdExists nvim ; then
    export MANPAGER='nvim +Man!'
elif [[ -n $BAT_CMD ]]; then
    if man --help 2>&1 | grep -q mandoc ; then
        export MANPAGER="$HOME/.local/bin/df-batman.sh"
    else
        export MANPAGER="sh -c 'col -bx | $BAT_CMD -l man -p'"
    fi
fi

DIFF_PAGER=less
DIFF_PAGER_OPTS=""
if (cmdExists delta && cmdExists git); then
    git config --global --replace-all core.pager delta
    git config --global --replace-all interactive.diffFilter "delta --color-only --features=interactive"
    DIFF_PAGER="delta"
    DIFF_PAGER_OPTS="--side-by-side"

    fancydiff() { diff "$@" -u | delta --side-by-side ; }
fi


if cmdExists rg; then
    export FZF_DEFAULT_COMMAND='rg --files --hidden -g "!.git/"'
else
    export FZF_DEFAULT_COMMAND='find'
fi
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

if cmdExists eza; then
    LS_CMD='eza --color=auto'
    LL_CMD="$LS_CMD -lbagh --classify --group-directories-first --color-scale all"
    LLM_CMD="$LS_CMD -lbagh --classify --sort=modified  --color-scale all"
    LL_UNSORTED_CMD="$LS_CMD -lbagh --classify --sort=none --color-scale all"
    alias tree='eza --tree --level=2 --color=auto'
else
    LS_CMD='ls -F --color=tty'
    LL_CMD="$LS_CMD -lAh --group-directories-first"
    LLM_CMD="$LS_CMD -lAh --sort=time"
    LL_UNSORTED_CMD="$LS_CMD -lAh -U"
fi
alias ls="$LS_CMD"
alias ll="$LL_CMD"
alias llm="$LLM_CMD"
alias wll="watch --color -d $LL_CMD"
alias wllm="watch --color -d $LLM_CMD --reverse"


if cmdExists yt-dlp; then
    alias ytdl='yt-dlp'
elif cmdExists youtube-dl; then
    alias ytdl='youtube-dl'
else
    alias ytdl='echo yt-dlp not installed'
fi

#
# functions -------
#

function youtubeDownloadAudio {
    local url="$1"
    url=$(echo -n "$url" | sed -r 's#^(https?://)m\.(youtube)#\1www.\2#')

    ytdl --extract-audio --audio-format best "$url"
}



# Workaround for 'vagrant ssh' in cygwin
export VAGRANT_PREFER_SYSTEM_BIN=1


#export LSCOLORS="Hxfxcxdxbxegedabagacad"
#export LS_COLORS="di=1;37:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"
LS_COLORS="no=00:fi=00:di=01;37:ln=00;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=41;33;01:ex=00;32:*.cmd=00;32:*.exe=01;32:*.com=01;32:\
    *.bat=01;32:*.btm=01;32:*.dll=01;32:*.tar=00;31:*.tbz=00;31:*.tgz=00;31:*.rpm=00;31:*.deb=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:\
    *.zoo=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.tb2=00;31:*.tz2=00;31:*.tbz2=00;31:*.avi=01;35:*.bmp=01;35:*.fli=01;35:*.gif=01;35:*.jpg=01;35:\
    *.jpeg=01;35:*.mng=01;35:*.mov=01;35:*.mpg=01;35:*.pcx=01;35:*.pbm=01;35:*.pgm=01;35:*.png=01;35:*.ppm=01;35:*.tga=01;35:*.tif=01;35:*.xbm=01;35:*.xpm=01;35:\
    *.dl=01;35:*.gl=01;35:*.wmv=01;35:*.aiff=00;32:*.au=00;32:*.mid=00;32:*.mp3=00;32:*.ogg=00;32:*.voc=00;32:*.wav=00;32:"
export LS_COLORS=$(echo -n "$LS_COLORS" | tr -d '[:space:]')

#
# aliases ---------
#


alias kgall="kubectl get all,ing,pv,pvc"
alias kgallw="kubectl get all,ing,pv,pvc -o wide"
alias mydstat="dstat -lcdfmnp -C total --disk-util"
alias sk="screenkey"
alias ugi="ug -Q"
alias ta="tmux a || tmux"
alias apts='sudo apt install $(apt-cache pkgnames | fzf -m --preview="apt info {}" --preview-window=:hidden --bind=space:toggle-preview)' # credit: http://ix.io/2hgn
function snap.installed() { snap list --all | awk '/-/{print $1}' | sort | uniq | grep -vhF "$(grep "default-provider:\|base:" /snap/*/current/meta/snap.yaml | awk '{print $NF}')" ; }

# Aliases for managing this dotfile collection
alias cfg='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias cfgf='cfg fetch origin'
alias cfgl='cfg pull origin'
alias cfgs='cfg status --branch'
alias cfgls="(cd $HOME && cfg ls-tree --name-only -r --full-tree HEAD $HOME)"
alias cfgll="(cd $HOME && cfg ls-tree --name-only -r --full-tree HEAD $HOME | xargs $LL_UNSORTED_CMD)"
alias cfga='cfg add'
function cfgd() { cfg diff "$@" | $DIFF_PAGER $DIFF_PAGER_OPTS ; }
alias cfgc='cfg commit -v'
alias cfgp='cfg push origin'
alias cfglog='cfg log --oneline --decorate --graph --all'
alias cfgu='curl -Lks https://git.io/crdotfiles | bash' # Update installation
alias cfgei='$EDITOR ~/.local/bin/df-install.sh'
alias cfgai='cfg add ~/.local/bin/df-install.sh'

if [[ "$FORGIT_INSTALL_DIR" != "" ]] ; then
  export FORGIT_FZF_DEFAULT_OPTS="$FORGIT_FZF_DEFAULT_OPTS --layout=reverse-list"

  alias cfgilog='cfg forgit log'
  alias cfgid='cfg forgit diff'
  alias cfgia='cfg forgit add'
  alias cfgii='cfg forgit ignore'

  alias gilog='git forgit log'
  alias gid='git forgit diff'
  alias gia='git forgit add'
  alias gicb='git forgit checkout_branch'
  alias gicf='git forgit checkout_file'
  alias gict='git forgit checkout_tag'
  alias girh='git forgit reset_head'
  alias gii='git forgit ignore'
  alias gicf='git forgit restore'
  alias giclean='git forgit clean'
  alias giss='git forgit stash_show'
fi

alias aws.ec2.list="aws ec2 describe-instances \
    --query \"sort_by(Reservations[*].Instances[*].{A_Name:not_null(Tags[?Key=='Name']|[0].Value,Tags[?Key=='eks:nodegroup-name']|[0].Value, 'NO NAME'),\
              InstanceId:InstanceId,PrivateIP:PrivateIpAddress,PublicIP:PublicIpAddress,\
              InstanceType:InstanceType,Status:State.Name,Started:LaunchTime}[], &A_Name)\" \
    --output table"
alias aws.ec2.show="aws ec2 describe-instances --output table --instance"
alias aws.rds.list="aws rds describe-db-instances \
    --query \"sort_by(DBInstances[*].{Class:DBInstanceClass,A_Id:DBInstanceIdentifier,Engine:Engine,Version:EngineVersion,\
              StorageGB:AllocatedStorage,Status:DBInstanceStatus,Endpoint:Endpoint.Address}[], &A_Id)\" \
    --output table"
alias aws.rds.show="aws rds describe-db-instances --output table --db-instance-identifier"
alias aws.fsx.list="aws fsx describe-file-systems \
    --query \"sort_by(FileSystems[*].{A_Name:Tags[?Key=='Name']|[0].Value,Id:FileSystemId,CapacityGB:StorageCapacity,Type:StorageType,\
              FS:FileSystemType,DnsName:DNSName}[], &A_Name)\" \
    --output table"
alias aws.fsx.show="aws fsx describe-file-systems --output table --file-system-id"
alias aws.efs.list="aws efs describe-file-systems \
    --query \"sort_by(FileSystems[*].{A_Name:Name,xARN:FileSystemArn,Id:FileSystemId,Mounts:NumberOfMountTargets,Size:SizeInBytes.Value}, &A_Name)\" \
    --output table"
alias aws.efs.show="aws efs describe-file-systems --output table --file-system-id"

alias aws.stopdb="aws rds stop-db-instance --output=table \
    --query \"DBInstance.{Class:DBInstanceClass,A_Id:DBInstanceIdentifier,Engine:Engine,Version:EngineVersion,\
              StorageGB:AllocatedStorage,Status:DBInstanceStatus,Endpoint:Endpoint.Address}\" --db-instance-identifier"
alias aws.startdb="aws rds start-db-instance --output=table \
    --query \"DBInstance.{Class:DBInstanceClass,A_Id:DBInstanceIdentifier,Engine:Engine,Version:EngineVersion,\
              StorageGB:AllocatedStorage,Status:DBInstanceStatus,Endpoint:Endpoint.Address}\" --db-instance-identifier"

aws.tunnelLocal() {
    PROFILE=$1
    INSTANCE=$2
    REMOTEPORT=$3
    LOCALPORT=$4
    echo "Forwarding $REMOTEPORT to localhost:$LOCALPORT"
    aws ssm start-session "--profile=$PROFILE" --target "$INSTANCE" --document-name AWS-StartPortForwardingSession --parameters "{\"portNumber\":[\"$REMOTEPORT\"], \"localPortNumber\":[\"$LOCALPORT\"]}"
}

aws.tunnelRemote() {
    PROFILE=$1
    INSTANCE=$2
    REMOTEHOST=$3
    REMOTEPORT=$4
    LOCALPORT=$5
    echo "Forwarding $REMOTEHOST:$REMOTEPORT to localhost:$LOCALPORT"
    aws ssm start-session "--profile=$PROFILE" --target "$INSTANCE" --document-name AWS-StartPortForwardingSessionToRemoteHost --parameters "{\"portNumber\":[\"$REMOTEPORT\"], \"localPortNumber\":[\"$LOCALPORT\"], \"host\":[\"$REMOTEHOST\"]}"
}

alias aws.ssm="aws ssm start-session --target"
alias aws.tunnelssh="aws ssm start-session --document-name AWS-StartPortForwardingSession --parameters '{\"portNumber\":[\"22\"], \"localPortNumber\":[\"4222\"]}' --target"

# ps on mac doesn't support the "F" option
if ps -eFwH >/dev/null 2>&1 ; then
    PS_CMD="ps -eFwH"
else
    PS_CMD="ps auxw"
fi

# Can't remember all those aliases / environment vars? Use this to search through them
if [[ -n $BAT_CMD ]]; then
    FZF_SHELL_PREVIEW="echo {} | bat --color=always --language=zsh"
else
    FZF_SHELL_PREVIEW='echo {}'
fi
alias AG='alias | grep -i --colour=auto'
alias AF="alias | fzf --layout=reverse --preview='$FZF_SHELL_PREVIEW' --ansi --preview-window=down,3,wrap | awk -F= '{print \$1}'"
alias EG='env | grep -i --colour=auto'
alias EF="env | fzf --layout=reverse --preview='$FZF_SHELL_PREVIEW' --preview-window=down,3,wrap | awk -F= '{print \$1}'"
alias PG="$PS_CMD | grep -i --colour=auto"
alias PF="$PS_CMD | fzf --header-lines=1 --layout=reverse --preview='echo {}' --preview-window=down,3,wrap | awk '{print \$2}'"

# Commit, defaulting to the message of the previous commit
# Useful for multiple commits on the same ticket/issue
alias gch='git commit -v -c HEAD'
# Exit the credential cache to make it forget the bad password I just entered
alias gce='git credential-cache exit'

# Search for the given String in all branches (HEAD commits)
function ggrepa { git branch -a --format "%(refname)" | xargs git grep "$1" | grep --color=auto "$1" ; }

alias s="sudo"
alias se="sudoedit"
alias sv="SUDO_EDITOR=view sudoedit"
alias psa="$PS_CMD"

if cmdExists xdg-open ; then
    alias open="xdg-open"
fi

alias myip.public=" curl -4 ifconfig.co"

if cmdExists ip ; then
    alias myip.local="ip -4 -j a | jq '.[] | {name: .ifname, ip: .addr_info[0].local}'"
    alias ipa="ip -o --color=auto addr"
else
    alias myip.local="ifconfig | grep inet | grep -v inet6"
    alias ipa="ifconfig | grep inet | grep -v inet6"
fi
function ipas { ip -o addr | awk '!/temporary/ {printf "%-20s : %-10s %-30s\n", $2, $3, $4}' ; }
alias ipl="ip -o --color=auto link"
function ipls { ip -o link | awk 'match($0, /(link\/[^ ]+)/, groups) {printf "%-20s : %-10s %-10s %-20s\n", $2, $9, $11, groups[1]}' ; }
alias ipr="ip -o --color=auto route"
alias ipinfo="echo \"== Links ==\" && ipl && echo -e \"\n== Addresses ==\" && ipa && echo -e \"\n== DNS ==\" && resolvectl dns && echo -e \"\n== Routes ==\" && ipr"

# List processes listening on TCP ports
# From https://stackoverflow.com/a/30029855/1814922
listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P +c 15
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P +c 15 | grep -i -E --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

splitstr() { sed -r "s%${1:-\s}+%\n%g" ; }

dirdiff()
{
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    $EDITOR "$@" -c "DirDiff $DIR1 $DIR2"
}

# df+mount listing only physical volumes (TODO: also filter out snap mounts)
alias dfp="df -h | grep -v -E '^\b(tmpfs|none|udev|/dev/loop|overlay|shm)\b'"
alias mountp="mount | grep -E '^(/|\w+:)' | grep -v -E 'type (squashfs)'"

alias brew.list="brew list --installed-on-request"
alias cpv='rsync -ah --info=progress2'

alias tf="terraform"

alias yta='youtubeDownloadAudio'

if cmdExists nvim ; then
    alias vw='nvim -c "ObsidianQuickSwitch"'
    alias vj='nvim -c "ObsidianToday"'
    alias vc='(cd "$HOME" && echo -n " fc" | nvim -s -)'
fi

alias v="$EDITOR"
alias vt='$EDITOR ~/todo.txt'
alias vs='$EDITOR ~/.shellrc'
alias vl='$EDITOR ~/.zsh/local/*'
alias vv='$EDITOR ~/.vimrc'
alias vz='$EDITOR ~/.zshrc'

alias srcz='source ~/.zshrc'
alias srcs='source ~/.shellrc'
srcl() {
    if [[ -d ~/.zsh/local ]] ; then
        for script in ~/.zsh/local/*.zsh ; do
            source $script
        done
    fi
}

alias httpbin="docker run -p 80:80 kennethreitz/httpbin"
alias httpbin_with_log="docker run -p 80:80 -e GUNICORN_CMD_ARGS=\"--capture-output --error-logfile - --access-logfile - --access-logformat '%(h)s %(t)s %(r)s %(s)s Host: %({Host}i)s'\" kennethreitz/httpbin"

# SSH to a VM that might have the IP of a previous connection, but a different host key
alias sshvm='ssh -o stricthostkeychecking=no -o addkeystoagent=no'

alias oxker="docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock:ro mrjackwills/oxker"

# Set better pager for psql (credit: Luciano Andress Martini in https://stackoverflow.com/a/14474666/1814922)
export PSQL_PAGER="view -c 'set nomod nolist syntax=sql' -"

# More a template for multiple db "aliases"
pg_local() { psql -h localhost -p 5432 -U "${1:-postgres}" postgres "${@:2}" ; }

# Options for shellcheck (https://github.com/koalaman/shellcheck)
# --check-sourced: Include warnings from sourced files
# --external-sources: Allow 'source' outside of FILES
# -e SC1090: ignore "Cannot follow dynamically sourced file"
# -e SC2034: ignore "Variable X seems unused"
export SHELLCHECK_OPTS="--check-sourced --external-sources -e SC1090 -e SC2034"

# Default settings for bc
export BC_ENV_ARGS="$HOME/.bc"

# Default options for mtr
export MTR_OPTIONS="-t"

# Spin up a simple web server serving the current directory statically on port 8000
function htserve() {
  if command -v ruby >/dev/null 2>&1 ; then
    ruby -run -ehttpd . -p8000
  elif command -v python3 >/dev/null 2>&1 ; then
    python3 -m http.server 8000
  elif command -v python >/dev/null 2>&1 ; then
    python -m http.server 8000
# busybox didn't work for me
#  elif command -v busybox >/dev/null 2>&1 ; then
#    busybox httpd -f -p 8000
  fi
}

# Convert markdown to PDF
function md2pdf() {
    INFILE=$1
    pandoc -t pdf -V papersize:a4 -V geometry:a4paper -V fontfamily:sans -V fontsize:12pt -o "${INFILE%.md}.pdf" "$INFILE" && xdg-open "${INFILE%.md}.pdf"
}

# Send a command to all TMUX panes in the current session
# Only affects panes where nothing (except for the shell) is running.
# Adapted from https://stackoverflow.com/a/51049964/1814922
sendToAllPanes() {
    if [[ $# -eq 0 || "$1" = "--help" ]] ; then
        echo 'Usage: sendToAllPanes <command>'
        return
    fi
    input_command=("${@}")
    for _pane in $(tmux list-panes -s -F '#{window_index}.#{pane_index}'); do
        # only apply the command in bash or zsh panes.
        _current_command=$(tmux display-message -p -t ${_pane} '#{pane_current_command}')
        if [ ${_current_command} = zsh ] || [ ${_current_command} = bash ] ; then
            tmux send-keys -t ${_pane} "${input_command[@]}" Enter
        fi
    done
}

# Fix for tilix (see https://gnunn1.github.io/tilix-web/manual/vteconfig/)
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
fi